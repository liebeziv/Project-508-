COMPX508 恶意软件分析 - Week 2 知识点总结
第一部分：虚拟内存和PE文件
1. 可执行文件基础

机器指令 (Machine Instructions)：处理器执行的操作码，与汇编语言一一对应
执行过程：程序从硬盘加载到RAM中执行，CPU从内存读取指令

2. 虚拟内存系统
虚拟内存的必要性

80:20规则：80%的代码仅在20%的时间内使用
多程序运行：物理内存限制下需要支持多个程序同时运行
内存管理：不需要整个程序都在内存中

虚拟内存实现机制

地址空间分配：

32位OS：2^32位地址空间
64位OS：2^48位地址空间


分页机制：

页 (Pages)：虚拟地址空间划分为固定大小块（通常4KB）
帧 (Frames)：物理内存划分为相同大小的块


页表 (Page Table)：维护虚拟页到物理帧的映射关系
按需分页 (Demand Paging)：根据需要将页从虚拟地址空间复制到物理内存

恶意软件分析中的内存信息价值

内存布局分析
进程虚拟地址空间检查
页表映射关系
内存中的恶意代码定位

3. 可执行文件格式
文件格式演进

COFF (Common Object File Format)：UNIX System V引入
PE (Portable Executable)：Windows使用，源于COFF
ELF (Executable and Linkable Format)：现代Unix衍生系统
Mach-O：Mac OS X使用

4. PE文件格式详解
Windows数据类型

CHAR = 1字节
WORD = 2字节
SHORT = 2字节
DWORD = 4字节
LONG = 4字节
QWORD = 8字节
LONGLONG = 8字节

PE文件结构组成
DOS MZ Header

大小：64字节
e_magic：DOS可执行文件魔数 (4D 5A)
e_lfanew：PE头的偏移地址

DOS Stub

位于DOS头之后
通常显示"This program must be run under Microsoft Windows"
默认链接WINSTUB.exe，可自定义

PE Header (IMAGE_NT_HEADERS)
包含三部分：

签名 (Signature)：DWORD值 PE\0\0 (50 45 00 00)
文件头 (File Header)
可选头 (Optional Header)

File Header关键字段

Machine：目标架构

014C → x86
8664 → 64位


TimeDateStamp：链接时间戳
Characteristics：文件特征

0x0002：可执行文件
0x2000：DLL文件
0x1000：系统文件
0x0100：32位机器
0x0020：处理大地址(>2GB)



Optional Header关键字段

Magic：编译目标

0x10B = 32位
0x20B = 64位


AddressOfEntryPoint：入口点RVA地址
SizeOfImage：加载PE文件需要的连续内存大小
ImageBase：首选加载地址
DataDirectory[16]：16个数据结构数组，指向PE文件重要结构

PE文件节 (Sections)
标准节类型

.text：可执行代码，包含程序入口点
.bss：未初始化数据，静态声明变量
.rdata：只读数据，常量和字符串字面量
.data：读写数据，全局变量
.rsrc：资源信息（图标、菜单、对话框等）
.edata：导出函数名称和地址信息
.idata：导入函数信息
.debug：调试信息
.reloc：重定位信息，用于地址修正

最小节要求

至少需要两个节：.text和.data

5. 加载器工作原理

磁盘到虚拟内存：Windows加载器创建虚拟地址空间
节映射：将PE文件各节加载到地址空间
DLL导入：加载所需动态链接库
地址解析：解析完成后跳转到入口点

第二部分：恶意软件功能和传播机制
1. 核心恶意软件功能
主要恶意软件类型

特洛伊木马 (Trojan Horse)：伪装成正常程序
后门 (Backdoor)：绕过认证或加密
远程访问工具 (RAT)：远程控制受害机器
僵尸网络 (Botnet)：设备集群控制
加密货币挖矿 (Cryptominer)：利用资源挖矿
勒索软件 (Ransomware)：加密文件索要赎金
信息窃取器 (Information Stealer)：窃取敏感信息
Rootkit：获取根权限的远程访问
蠕虫 (Worm)：自我传播和复制

2. 附加恶意软件功能
目标实现

在尽可能多的终端设备上运行
影响更大规模用户获得更好投资回报
保持隐蔽性，难以被检测和分析

功能组件围绕载荷 (Payload)
打包器 (Packer)

主要目的：压缩软件
副作用：混淆代码，使静态分析失效
反病毒规避：静态签名无法检测打包后的恶意载荷

持久化 (Persistence)

目标：在受害机器上持续运行
要求：经受重启和多次登录
实现：自启动机制、服务安装等

通信 (Communication)

目的：与攻击者通信
用途：上传窃取数据、接收命令
C2服务器：命令控制服务器
通信方式：

简单HTTP
HTTPS
DNS隧道
域名生成算法 (DGA)
Tor网络



传播 (Propagation)

目标：感染尽可能多的设备
APT场景：通过网络横向移动到达真正目标
策略：最大化感染范围

装甲防护 (Armoring) - 自我防御

目标：避免被反恶意软件产品检测
技术：

反调试 (Anti-debugging)
反杀毒 (Anti-antivirus)
虚拟机检测 (VM detection)
沙箱检测 (Sandbox detection)
分析工具检测



隐秘性 (Stealth) - 保持隐藏

目标：避免用户发现
例外：勒索软件不需要隐藏
重要性：银行木马、RAT等高优先级
技术范围：

简单：修改文件属性为隐藏
复杂：感染其他程序、代码注入、进程挖空、rootkit



3. 恶意软件传播
MITRE ATT&CK框架
参考：https://attack.mitre.org/

初始访问技术：11种技术类别
具体技术：内容注入、驱动器感染、公共应用漏洞利用等

4. 漏洞利用
漏洞概况

2025年披露：25,972个公开漏洞
非公开披露：开发者、安全团队、漏洞赏金猎人、国家级别、攻击者
成因：编程错误导致软件缺陷

漏洞利用 (Exploits)

定义：利用特定漏洞执行恶意载荷或提升权限的代码
作用：恶意软件传播的核心组件
方法：扫描未打补丁的系统进行利用

漏洞利用包 (Exploit Kits)

目的：在DMZ之外的安全网络内利用系统
方法：诱导受害者访问攻击者机器（水坑攻击）
工作流程：

访问被攻陷的网页
联系恶意漏洞利用包页面
探测PC漏洞
选择特定利用方式
执行对应漏洞利用



5. 恶意软件传播渠道
六大主要传播渠道
直接扫描和利用

扫描具有公共应用的机器
利用漏洞投放恶意软件

基于邮件的传播

最主要传播技术
方式：恶意附件、恶意网站链接

基于Web的传播

恶意软件托管在网站上
受害者访问时被感染
分发方式：邮件链接、被攻陷的合法网站、恶意广告

凭据泄露

攻击者获取用户凭据
直接在机器上安装恶意软件

供应链传播

攻陷软件或硬件组件/依赖项
在依赖项中添加恶意软件
影响下游众多产品

物理传播

USB闪存驱动器等物理媒介


可能考题及答案
选择题 (MCQs)
Q1: PE文件的DOS头大小是多少字节？
A) 32字节  B) 64字节  C) 128字节  D) 256字节
答案：B) 64字节
Q2: 32位操作系统的虚拟地址空间大小是？
A) 2^16位  B) 2^24位  C) 2^32位  D) 2^48位
答案：C) 2^32位
Q3: PE文件签名的十六进制值是？
A) 4D 5A  B) 50 45 00 00  C) FF FE  D) 00 00 50 45
答案：B) 50 45 00 00
Q4: 以下哪个不是PE文件的标准节？
A) .text  B) .data  C) .heap  D) .rsrc
答案：C) .heap
Q5: 80:20规则指的是？
A) 80%的内存用于20%的程序  B) 80%的代码在20%的时间内使用
C) 80%的漏洞影响20%的系统  D) 80%的恶意软件使用20%的技术
答案：B) 80%的代码在20%的时间内使用
简答题 (Short Questions)
Q1: 解释虚拟内存中页(Pages)和帧(Frames)的概念及其关系。
答案：

页(Pages)：虚拟地址空间被划分为固定大小的块，通常为4KB
帧(Frames)：物理内存被划分为与页相同大小的块
关系：页表维护虚拟页到物理帧的映射关系，实现虚拟地址到物理地址的转换

Q2: 列出PE文件的主要组成部分。
答案：

DOS MZ Header
DOS Stub
PE File Header (包含PE签名)
Image Optional Header
Section Table (节表)
Data Directories
Sections (各个节的实际数据)

Q3: 恶意软件的六大传播渠道是什么？
答案：

直接扫描和利用
基于邮件的传播
基于Web的传播
凭据泄露
供应链传播
物理传播

长答题 (Long Questions)
Q1: 详细描述PE文件的加载过程，包括从磁盘到内存的各个步骤。
答案：

创建虚拟地址空间：Windows加载器为进程创建虚拟地址空间
映射可执行模块：将磁盘上的PE文件映射到进程地址空间
加载节数据：

使用PE文件中的信息加载各个节
不是所有节都需要加载
根据节的属性决定加载方式


导入DLL：加载程序需要的动态链接库
地址解析：解析所有地址引用，修正重定位
跳转执行：完成加载后，控制权转移到程序入口点

Q2: 分析恶意软件的附加功能组件，解释它们如何围绕载荷(Payload)工作。
答案：
恶意软件的附加功能围绕核心载荷设计，形成完整的攻击链：

打包器(Packer)：

压缩和混淆载荷代码
绕过静态分析和反病毒检测
使载荷在分析时不可见


持久化(Persistence)：

确保恶意软件在系统重启后继续运行
通过注册表、服务、计划任务等方式实现
保证长期控制目标系统


通信(Communication)：

与C2服务器建立通信通道
接收攻击者命令，上传窃取数据
使用HTTP/HTTPS、DNS隧道、Tor等技术


传播(Propagation)：

在网络中横向移动
感染更多系统扩大影响范围
通过漏洞利用、凭据窃取等方式实现


装甲防护(Armoring)：

检测分析环境（虚拟机、沙箱、调试器）
采用反分析技术阻碍逆向工程
保护恶意软件不被发现和分析


隐秘性(Stealth)：

在系统中隐藏存在痕迹
使用代码注入、进程挖空等技术
避免被用户或安全软件发现



这些组件协同工作，确保载荷能够成功部署、持续运行并完成攻击目标。
