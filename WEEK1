恶意软件分析知识点总结
1. 恶意软件定义与特征
Malware (恶意软件)

定义：Malicious software - 执行恶意操作的指令集合
可以用任何编程语言编写
目标：让系统执行不应该执行的操作
攻击者可以使用系统中的合法可执行文件进行攻击 - "Living off the land (LOTL)"

常用编程语言：

C/C++ - 操作系统级别
C# - Windows机器
Java - Android恶意软件
Objective-C - Mac恶意软件
Javascript - 基于浏览器的恶意软件
新兴语言：Golang, Dlang, Rust, Nim

2. 恶意软件分析方法
Static Analysis (静态分析)

通常是研究恶意软件的第一步
在不执行程序的情况下分析代码和程序结构

Dynamic Analysis (动态分析)

在隔离环境中执行二进制文件并监控其行为

3. 恶意软件分类
功能分类 (Functional Classification)

基于恶意软件实现的功能特征进行分类
例如：ransomware（勒索软件）、botnets（僵尸网络）、cryptomining（加密货币挖矿）
Blended threat（混合威胁）：结合两种或多种恶意功能

家族谱系分类 (Familial, Lineage Classification)

关注恶意软件的作者身份和谱系
根据家族、作者身份和相似属性进行分类
例如：APT1, APT12, APT17等

4. 文件识别与分析
文件哈希 (File Hash)

作用：恶意软件的唯一通用标识符
算法：MD5, SHA1, SHA256
工具：

Linux: md5sum, sha1sum, sha256sum
MacOS: shasum
Windows: Quickhash, hashmyfiles



在线扫描器注意事项

无检测结果不代表无恶意软件
文件可能包含敏感数据，不要上传机密调查文件
扫描器可能存储上传的文件
使用基于哈希的文件标识符

恶意软件命名约定 (CARO Naming Convention)
格式：Type:Platform/Family.Variant!Additional_info
示例：Email-Worm:Win32/Bagle.aav!dll

Type: Email-Worm
Platform: Win32
Family name: Bagle
Variant: aav
Additional information: dll

不同厂商命名示例：

Symantec: Prefix.Name.Suffix (Infostealer.Banker.C)
Avira: Prefix:Name [Type] (Win32:Zbot-BS [Trj])
Kaspersky: [Prefix:]Behaviour.Platform.Name[.Variant] (Trojan.Win32.Genome.taql)

5. 文件结构与类型
文件分类
非结构化文件：

无定义结构
例如：源代码、.txt、.html

结构化文件：

有定义的结构（头部、数据段、脚注等）
例如：.exe、.pdf、.png

PE文件格式 (Portable Executable)

Windows平台使用（x86和x64）
用于.exe、.dll、.sys等文件
结构：DOS MZ Header → DOS Stub → PE File Header → Image_Optional_Header → Section Table → Sections

文件格式签名 (File Format Signatures)
Magic Numbers（魔术数字）：

PE: 4D 5A
PDF: 25 50 44 46
GIF: 47 49 46 38
DOCX: 50 4B 03 04 14 00 06 00
MP3: 49 44 43
PNG: 89 50 4E 47 0D 0A 1A 0A

文件类型检测工具
Windows：

HxD (十六进制编辑器)
PEview

Linux/MacOS：

xxd (十六进制转储)
file命令

file命令功能

文件系统测试：检查空文件或文件系统文件
魔术测试：使用外部魔术文件检查文件类型
语言测试：检查文本文件的字符集

6. 字符串分析 (Strings Analysis)
字符串基础

定义：程序中的字符串可以提供程序功能的线索
用途：变量名、字符串变量内容、函数名、库名、路径等
终止符：ASCII和Unicode字符串以NULL字符(0x00)终止
检测标准：strings工具寻找3个或更多ASCII/Unicode字符序列，后跟0x00

ASCII表示法
示例：

'f' → 66 (01100110)
'g' → 67 (01100111)
'5' → 35 (00110101)
'6' → 36 (00110110)

字符串分析的局限性

可以提供大量程序信息
但静态分析可能受到严重限制

7. 加壳技术 (Packing)
加壳器定义

Packer：将可执行文件作为输入并压缩的程序
添加包装程序在执行前解压缩二进制文件

加壳目的

压缩程序：使用压缩算法缩小原始可执行文件
阻碍静态分析：转换或加密可执行文件，特别是基于字符串的静态分析

加壳器类型
公开已知加壳器：

例如：UPX
检测工具：TrID, PEiD, Detect It Easy

定制或新设计加壳器：

难以检测
通常由恶意软件作者使用

加壳对分析的影响

加壳后的文件中字符串和其他信息不可见
需要先脱壳才能进行有效的静态分析

8. 实际案例分析
W32.Nimda蠕虫 (2001年)
传播方法：

文件感染：复制自身并重命名为实际可执行文件名
大量邮件：每10天收集邮件地址并发送带附件的邮件
Web蠕虫：生成随机IP地址搜索IIS服务器漏洞
LAN传播：搜索开放文件共享并在包含DOC或EML文件的目录中存储隐藏文件

特洛伊化PuTTY软件

哈希：B5c88d5af37afd13f89957150f9311ca
特征：通过恶意镜像站点分发，界面和功能与原版相似
区别：编译版本不同，关于信息略有差异


可能考题及答案
选择题 (MCQs)
Q1: PE文件格式的魔术数字是什么？
A) 25 50 44 46
B) 4D 5A
C) 47 49 46 38
D) 89 50 4E 47
答案：B) 4D 5A
Q2: strings工具默认寻找多少个连续的ASCII字符？
A) 2个或更多
B) 3个或更多
C) 4个或更多
D) 5个或更多
答案：B) 3个或更多
Q3: 以下哪个不是加壳器的主要目的？
A) 压缩程序
B) 阻碍静态分析
C) 提高程序执行速度
D) 转换或加密可执行文件
答案：C) 提高程序执行速度
简答题 (Short Questions)
Q1: 解释静态分析和动态分析的区别。
答案：

静态分析：在不执行程序的情况下分析代码和程序结构，通常是研究恶意软件的第一步
动态分析：在隔离环境中执行二进制文件并监控其行为

Q2: 为什么要使用文件哈希而不是文件名来识别恶意软件？
答案：

文件名不是可靠的标识符，容易被修改
文件哈希（MD5、SHA1、SHA256）是唯一的通用标识符
相同的恶意软件无论文件名如何都会产生相同的哈希值

Q3: 列举三种检测文件类型的方法。
答案：

检查文件头部的魔术数字
使用file命令（Linux/MacOS）
使用十六进制编辑器查看文件结构

长答题 (Long Questions)
Q1: 详细描述CARO恶意软件命名约定的组成部分，并给出一个具体示例进行解释。
答案：
CARO命名约定包含以下组成部分：

Type（类型）：描述恶意软件的行为类型
Platform（平台）：指定目标平台
Family name（家族名）：恶意软件家族
Variant（变体）：特定变体标识
Additional information（附加信息）：其他相关信息

示例：Email-Worm:Win32/Bagle.aav!dll

Type: Email-Worm（邮件蠕虫）
Platform: Win32（Windows 32位平台）
Family name: Bagle（Bagle家族）
Variant: aav（aav变体）
Additional information: dll（动态链接库）

Q2: 解释加壳技术及其对恶意软件分析的影响，包括检测和应对方法。
答案：
加壳技术定义：
加壳器是将可执行文件压缩并添加解压缩包装程序的工具。
目的：

压缩程序以减小文件大小
阻碍基于字符串的静态分析
隐藏恶意代码的真实结构

对分析的影响：

原始程序的字符串和结构信息被隐藏
静态分析变得困难或无效
需要先脱壳才能进行有效分析

检测方法：

使用专门的检测工具（TrID, PEiD, Detect It Easy）
分析文件的熵值和段结构异常
检查文件的导入表是否异常简单

应对方法：

使用自动脱壳工具
进行动态分析观察运行时行为
内存转储技术获取解压后的代码
