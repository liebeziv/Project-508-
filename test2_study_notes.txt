Week7 动态分析与 Windows API

1. 动态分析 (Dynamic Analysis)
   - 在无法获得源码时，通过运行样本回答“谁、什么、何时、何地、为何以及如何”等核心问题，并与静态分析 (Static Analysis) 结果交叉印证。
   - 优势：可直接观察恶意代码真实行为，具有对抗混淆 (Obfuscation) 的能力；劣势：未覆盖路径导致结果不完整，且存在破坏系统风险 (Risk of Damage)。

2. 系统交互监控面 (System Interaction Monitoring Surfaces)
   - 进程监控 (Process Monitoring)：使用进程活动观察器识别新进程属性及父子关系。
   - 文件系统监控 (File System Monitoring)：实时跟踪文件创建、写入与删除。
   - 注册表监控 (Registry Monitoring)：检测键值访问、修改及权限变更。
   - 网络监控 (Network Monitoring)：分析入站与出站流量、域名、IP。
   - 系统调用监控 (System Call Monitoring)：捕获内核接口调用。
   - API 调用监控 (API Call Monitoring)：记录 Windows API (Windows Application Programming Interface) 调用序列与参数。

3. 程序执行层次 (Program Execution Layers)
   - 语言级库 (Language-Level Libraries)：如 C/C++ 标准库提供 I/O 与内存管理。
   - 系统级 DLL (System-Level Dynamic Link Libraries)：例如 kernel32.dll (Windows Kernel Mode API Library)、user32.dll (User Interface API Library)、ucrtbase.dll (Universal C Runtime Library)。
   - 系统调用 (System Calls)：在用户态与内核态之间切换，如 NtWriteFile。
   - 内核 (Kernel)：负责调度、内存、设备管理。
   - 设备驱动 (Device Drivers)：将高层读写请求转换为硬件动作。

4. “Hello World” 调用链示例 (Hello World Call Chain Example)
   - 指出不同语言最终都会调用到系统级库与系统调用，示意图展示 print → _write → NtWriteFile → 驱动 → 硬件。

5. 可观测信息 (Observable Information)
   - 发行版剥离调试符号后仍保留字符串 (Literal Strings)、导入的 DLL 名称 (Imported DLL Names) 与函数引用。

6. Windows API 与 DLL (Windows API and DLLs)
   - 常见 DLL 功能：
     * kernel32.dll – 进程/线程管理 (Process and Thread Management)、虚拟内存 (Virtual Memory)、I/O。
     * user32.dll – 窗口管理 (Window Management)、消息循环 (Message Loop)。
     * gdi32.dll – 图形设备接口 (Graphics Device Interface) 绘图。
     * advapi32.dll – 安全 (Security) 与注册表操作 (Registry Operations)。
     * ws2_32.dll – 套接字网络函数 (Windows Sockets API)。
     * wininet.dll – HTTP/FTP 通信 (Internet Communications)。
     * shell32.dll – Windows Shell 功能 (Shell Operations)。
   - DLL 加载方式：隐式链接 (Implicit Linking) 由操作系统在加载时解析导入表 (Import Table)；显式链接 (Explicit Linking) 通过 LoadLibrary 与 GetProcAddress 在运行时解析，常被用于动态解析 (Dynamic Resolution)。
   - API 隐蔽技术：API 哈希 (API Hashing)、手工枚举导出表 (Manual Export Enumeration)、直接系统调用 (Direct System Calls) 等。
   - API 行为监控：关注调用序列与参数，例如 FindFirstFile → CreateFileW → WriteFile 表征勒索软件行为。

Week8 Windows 启动流程与核心进程

1. 启动链路 (Bootstrapping Chain)
   - PSU (Power Supply Unit) 上电自检 → CPU 执行硬件固化指令 → BIOS/UEFI (Basic Input/Output System / Unified Extensible Firmware Interface) → POST (Power-On Self-Test) → MBR (Master Boot Record) → bootmgr (Windows Boot Manager) → winload.exe (Windows OS Loader) → ntoskrnl.exe (Windows NT Kernel)。
   - winload.exe 负责加载 HAL.dll (Hardware Abstraction Layer)、注册表 Hive、存储驱动 (Storage Drivers) 等。

2. 进程基础 (Process Fundamentals)
   - 定义：程序 (Program) 是磁盘上的被动实体，进程 (Process) 是加载到内存的活动实体。
   - 构成：PID (Process Identifier)、虚拟地址空间 (Virtual Address Space)、PEB (Process Environment Block)、句柄表 (Handle Table)、线程 (Threads)。
   - 所有进程通过 CreateProcess API 创建，形成父子层级。

3. 关键系统进程链 (Critical System Process Chain)
   - System Idle Process (假进程，仅占位)；System 进程 (PID 4) 负责内核任务与驱动加载。
   - smss.exe (Session Manager Subsystem)：建立 session 0/1，生成 winlogon.exe、wininit.exe、csrss.exe。
   - winlogon.exe (Windows Logon Process)：读取注册表 Winlogon 键决定用户壳程序。
   - csrss.exe (Client/Server Runtime SubSystem)：负责控制台窗口与关机流程。
   - wininit.exe (Windows Initialization Process)：启动 services.exe (Service Control Manager) 与 lsass.exe (Local Security Authority Subsystem Service)。
   - services.exe：读取 HKLM\SYSTEM\CurrentControlSet\Services 运行驱动与服务。
   - svchost.exe (Service Host Process)：托管多个服务组。
   - lsass.exe：执行认证、凭据管理。
   - explorer.exe (Windows Explorer)：提供 GUI 壳，用户启动的程序成为其子进程。

Week9 Windows 注册表与沙箱分析

1. 注册表结构 (Registry Structure)
   - 根 Hive：HKCR (HKEY_CLASSES_ROOT – 文件关联与 COM 信息)、HKCU (HKEY_CURRENT_USER – 当前用户配置)、HKLM (HKEY_LOCAL_MACHINE – 全局配置)、HKU (HKEY_USERS – 所有用户配置)、HKCC (HKEY_CURRENT_CONFIG – 当前硬件配置)。
   - 数据类型：REG_SZ (字符串)、REG_MULTI_SZ (多字符串)、REG_DWORD (32 位整数)、REG_QWORD (64 位整数)、REG_BINARY (二进制)、REG_EXPAND_SZ (可扩展字符串) 等。

2. 标识符 (Identifiers)
   - SID (Security Identifier)：格式 S-版本-机构-域-相对标识符，如 S-1-5-21-…-500 表示内置管理员。
   - GUID (Globally Unique Identifier)：形如 {8-4-4-4-12 十六进制}，用于唯一标识组件。

3. 注册表 API (Registry APIs)
   - 主要来自 advapi32.dll，例如 RegCreateKeyEx、RegSetValueEx、RegQueryInfoKey、RegDeleteKey、RegGetValue。

4. 恶意持久化位置 (Persistence Locations)
   - BootExecute：HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\BootExecute，默认 autocheck，可执行 REG_MULTI_SZ 列表。
   - Services：HKLM\SYSTEM\CurrentControlSet\Services，检查 ImagePath 是否指向异常目录。
   - Winlogon 键：Userinit、Shell、Notify 可被修改以加载自定义可执行或 DLL。
   - Run/RunOnce/RunOnceEx 与 Policies\Explorer\Run：位于 HKCU 与 HKLM 下，常用于登录持久化。
   - Startup 目录键：HKCU/HKLM\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders 与 User Shell Folders 指向启动文件夹。

5. 沙箱与 IoC (Sandboxing and Indicators of Compromise)
   - IoC：主机型 (Host-based Indicators) 与网络型 (Network-based Indicators)，例如可疑文件、注册表键、URL、IP、流量模式。
   - 工具：
     * FlareVM 套件 (Flare Virtual Machine Toolkit) – Process Explorer、Process Monitor、API Logger、Strings、TCPView。
     * REMnux (Reverse-Engineering Malware Linux) – INetSim、Wireshark、Netcat、CyberChef。
   - 沙箱：Cuckoo Sandbox (开源自动化沙箱) 支持虚拟化、收集文件/进程/网络/系统变化并生成报告；其他方案包括 CAPE Sandbox、Any.Run。

Week10 代码注入技术

1. 注入动机 (Injection Motivations)
   - 隐藏自身 (Stealth) 通过挂靠合法进程；权限借用 (Privilege Piggybacking) 以绕过防火墙；功能篡改 (Functionality Tampering) 被 Rootkit 用于隐藏活动。

2. 二进制修改 (Binary Modification)
   - 使用反汇编器 (Disassembler) 定位代码，十六进制编辑器 (Hex Editor) 修改现有指令；受限于无法扩展代码段。

3. 典型注入流程 (Typical Injection Workflow)
   - 获取目标 PID：CreateToolhelp32Snapshot、Process32First、Process32Next。
   - 打开目标进程：OpenProcess + 权限提升 (LookupPrivilegeValue, AdjustTokenPrivileges, OpenProcessToken)。
   - 远程内存操作：VirtualAllocEx 分配可执行内存，WriteProcessMemory 写入 Payload。
   - 触发执行：常用 CreateRemoteThread 或远程 APC 注入 (Asynchronous Procedure Call Injection)。
   - 检测：监视上述 API 序列及内存权限变更。

4. DLL 基础 (DLL Fundamentals)
   - 导出函数 (Exported Functions) 需在头文件中使用 __declspec(dllexport) 声明。
   - DllMain (Dynamic-Link Library Main Function) 在 DLL 加载/卸载时运行，应保持逻辑轻量，可在其中创建线程执行主负载。
   - Rundll32 测试：rundll32.exe <DLL>,<Function> 用于触发导出函数验证。

5. DLL 注入 (DLL Injection)
   - 步骤：写入 DLL 路径 → 在目标地址空间查找 LoadLibrary → CreateRemoteThread 以该路径为参数调用 LoadLibrary → 可选 GetProcAddress 执行特定导出。
   - 利用内存布局：kernel32.dll 在各进程虚拟空间地址一致，可在本地获取 LoadLibrary 地址后复用。
   - 其他执行手段：SetWindowsHookEx、应用兼容性 Shim (Application Compatibility Shim)、Shellcode 注入 (Shellcode Injection)、进程空洞化 (Process Hollowing)、函数钩挂 (Function Hooking)。
